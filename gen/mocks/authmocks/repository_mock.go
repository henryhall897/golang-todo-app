// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package authmocks

import (
	"context"
	"github.com/google/uuid"
	"github.com/henryhall897/golang-todo-app/internal/auth/domain"
	"sync"
)

// Ensure, that RepositoryMock does implement domain.Repository.
// If this is not the case, regenerate this file with moq.
var _ domain.Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of domain.Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked domain.Repository
//		mockedRepository := &RepositoryMock{
//			CreateAuthIdentityFunc: func(ctx context.Context, input domain.CreateAuthIdentityParams) (domain.AuthIdentity, error) {
//				panic("mock out the CreateAuthIdentity method")
//			},
//			DeleteAuthIdentityByAuthIDFunc: func(ctx context.Context, authID string) error {
//				panic("mock out the DeleteAuthIdentityByAuthID method")
//			},
//			GetAuthIdentitiesByUserIDFunc: func(ctx context.Context, userID uuid.UUID) ([]domain.AuthIdentity, error) {
//				panic("mock out the GetAuthIdentitiesByUserID method")
//			},
//			GetAuthIdentityByAuthIDFunc: func(ctx context.Context, authID string) (domain.AuthIdentity, error) {
//				panic("mock out the GetAuthIdentityByAuthID method")
//			},
//		}
//
//		// use mockedRepository in code that requires domain.Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// CreateAuthIdentityFunc mocks the CreateAuthIdentity method.
	CreateAuthIdentityFunc func(ctx context.Context, input domain.CreateAuthIdentityParams) (domain.AuthIdentity, error)

	// DeleteAuthIdentityByAuthIDFunc mocks the DeleteAuthIdentityByAuthID method.
	DeleteAuthIdentityByAuthIDFunc func(ctx context.Context, authID string) error

	// GetAuthIdentitiesByUserIDFunc mocks the GetAuthIdentitiesByUserID method.
	GetAuthIdentitiesByUserIDFunc func(ctx context.Context, userID uuid.UUID) ([]domain.AuthIdentity, error)

	// GetAuthIdentityByAuthIDFunc mocks the GetAuthIdentityByAuthID method.
	GetAuthIdentityByAuthIDFunc func(ctx context.Context, authID string) (domain.AuthIdentity, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateAuthIdentity holds details about calls to the CreateAuthIdentity method.
		CreateAuthIdentity []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input domain.CreateAuthIdentityParams
		}
		// DeleteAuthIdentityByAuthID holds details about calls to the DeleteAuthIdentityByAuthID method.
		DeleteAuthIdentityByAuthID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AuthID is the authID argument value.
			AuthID string
		}
		// GetAuthIdentitiesByUserID holds details about calls to the GetAuthIdentitiesByUserID method.
		GetAuthIdentitiesByUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID uuid.UUID
		}
		// GetAuthIdentityByAuthID holds details about calls to the GetAuthIdentityByAuthID method.
		GetAuthIdentityByAuthID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AuthID is the authID argument value.
			AuthID string
		}
	}
	lockCreateAuthIdentity         sync.RWMutex
	lockDeleteAuthIdentityByAuthID sync.RWMutex
	lockGetAuthIdentitiesByUserID  sync.RWMutex
	lockGetAuthIdentityByAuthID    sync.RWMutex
}

// CreateAuthIdentity calls CreateAuthIdentityFunc.
func (mock *RepositoryMock) CreateAuthIdentity(ctx context.Context, input domain.CreateAuthIdentityParams) (domain.AuthIdentity, error) {
	if mock.CreateAuthIdentityFunc == nil {
		panic("RepositoryMock.CreateAuthIdentityFunc: method is nil but Repository.CreateAuthIdentity was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input domain.CreateAuthIdentityParams
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockCreateAuthIdentity.Lock()
	mock.calls.CreateAuthIdentity = append(mock.calls.CreateAuthIdentity, callInfo)
	mock.lockCreateAuthIdentity.Unlock()
	return mock.CreateAuthIdentityFunc(ctx, input)
}

// CreateAuthIdentityCalls gets all the calls that were made to CreateAuthIdentity.
// Check the length with:
//
//	len(mockedRepository.CreateAuthIdentityCalls())
func (mock *RepositoryMock) CreateAuthIdentityCalls() []struct {
	Ctx   context.Context
	Input domain.CreateAuthIdentityParams
} {
	var calls []struct {
		Ctx   context.Context
		Input domain.CreateAuthIdentityParams
	}
	mock.lockCreateAuthIdentity.RLock()
	calls = mock.calls.CreateAuthIdentity
	mock.lockCreateAuthIdentity.RUnlock()
	return calls
}

// DeleteAuthIdentityByAuthID calls DeleteAuthIdentityByAuthIDFunc.
func (mock *RepositoryMock) DeleteAuthIdentityByAuthID(ctx context.Context, authID string) error {
	if mock.DeleteAuthIdentityByAuthIDFunc == nil {
		panic("RepositoryMock.DeleteAuthIdentityByAuthIDFunc: method is nil but Repository.DeleteAuthIdentityByAuthID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		AuthID string
	}{
		Ctx:    ctx,
		AuthID: authID,
	}
	mock.lockDeleteAuthIdentityByAuthID.Lock()
	mock.calls.DeleteAuthIdentityByAuthID = append(mock.calls.DeleteAuthIdentityByAuthID, callInfo)
	mock.lockDeleteAuthIdentityByAuthID.Unlock()
	return mock.DeleteAuthIdentityByAuthIDFunc(ctx, authID)
}

// DeleteAuthIdentityByAuthIDCalls gets all the calls that were made to DeleteAuthIdentityByAuthID.
// Check the length with:
//
//	len(mockedRepository.DeleteAuthIdentityByAuthIDCalls())
func (mock *RepositoryMock) DeleteAuthIdentityByAuthIDCalls() []struct {
	Ctx    context.Context
	AuthID string
} {
	var calls []struct {
		Ctx    context.Context
		AuthID string
	}
	mock.lockDeleteAuthIdentityByAuthID.RLock()
	calls = mock.calls.DeleteAuthIdentityByAuthID
	mock.lockDeleteAuthIdentityByAuthID.RUnlock()
	return calls
}

// GetAuthIdentitiesByUserID calls GetAuthIdentitiesByUserIDFunc.
func (mock *RepositoryMock) GetAuthIdentitiesByUserID(ctx context.Context, userID uuid.UUID) ([]domain.AuthIdentity, error) {
	if mock.GetAuthIdentitiesByUserIDFunc == nil {
		panic("RepositoryMock.GetAuthIdentitiesByUserIDFunc: method is nil but Repository.GetAuthIdentitiesByUserID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID uuid.UUID
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetAuthIdentitiesByUserID.Lock()
	mock.calls.GetAuthIdentitiesByUserID = append(mock.calls.GetAuthIdentitiesByUserID, callInfo)
	mock.lockGetAuthIdentitiesByUserID.Unlock()
	return mock.GetAuthIdentitiesByUserIDFunc(ctx, userID)
}

// GetAuthIdentitiesByUserIDCalls gets all the calls that were made to GetAuthIdentitiesByUserID.
// Check the length with:
//
//	len(mockedRepository.GetAuthIdentitiesByUserIDCalls())
func (mock *RepositoryMock) GetAuthIdentitiesByUserIDCalls() []struct {
	Ctx    context.Context
	UserID uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		UserID uuid.UUID
	}
	mock.lockGetAuthIdentitiesByUserID.RLock()
	calls = mock.calls.GetAuthIdentitiesByUserID
	mock.lockGetAuthIdentitiesByUserID.RUnlock()
	return calls
}

// GetAuthIdentityByAuthID calls GetAuthIdentityByAuthIDFunc.
func (mock *RepositoryMock) GetAuthIdentityByAuthID(ctx context.Context, authID string) (domain.AuthIdentity, error) {
	if mock.GetAuthIdentityByAuthIDFunc == nil {
		panic("RepositoryMock.GetAuthIdentityByAuthIDFunc: method is nil but Repository.GetAuthIdentityByAuthID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		AuthID string
	}{
		Ctx:    ctx,
		AuthID: authID,
	}
	mock.lockGetAuthIdentityByAuthID.Lock()
	mock.calls.GetAuthIdentityByAuthID = append(mock.calls.GetAuthIdentityByAuthID, callInfo)
	mock.lockGetAuthIdentityByAuthID.Unlock()
	return mock.GetAuthIdentityByAuthIDFunc(ctx, authID)
}

// GetAuthIdentityByAuthIDCalls gets all the calls that were made to GetAuthIdentityByAuthID.
// Check the length with:
//
//	len(mockedRepository.GetAuthIdentityByAuthIDCalls())
func (mock *RepositoryMock) GetAuthIdentityByAuthIDCalls() []struct {
	Ctx    context.Context
	AuthID string
} {
	var calls []struct {
		Ctx    context.Context
		AuthID string
	}
	mock.lockGetAuthIdentityByAuthID.RLock()
	calls = mock.calls.GetAuthIdentityByAuthID
	mock.lockGetAuthIdentityByAuthID.RUnlock()
	return calls
}
