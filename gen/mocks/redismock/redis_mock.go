// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package redismock

import (
	"context"
	"github.com/henryhall897/golang-todo-app/pkg/redis"
	"sync"
	"time"
)

// Ensure, that CacheMock does implement redis.Cache.
// If this is not the case, regenerate this file with moq.
var _ redis.Cache = &CacheMock{}

// CacheMock is a mock implementation of redis.Cache.
//
//	func TestSomethingThatUsesCache(t *testing.T) {
//
//		// make and configure a mocked redis.Cache
//		mockedCache := &CacheMock{
//			DeleteFunc: func(ctx context.Context, key string) error {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(ctx context.Context, key string, dest interface{}) error {
//				panic("mock out the Get method")
//			},
//			GetPointerFunc: func(ctx context.Context, key string) (string, error) {
//				panic("mock out the GetPointer method")
//			},
//			SetFunc: func(ctx context.Context, key string, value interface{}, ttl time.Duration) error {
//				panic("mock out the Set method")
//			},
//			SetPointerFunc: func(ctx context.Context, key string, targetKey string, ttl time.Duration) error {
//				panic("mock out the SetPointer method")
//			},
//		}
//
//		// use mockedCache in code that requires redis.Cache
//		// and then make assertions.
//
//	}
type CacheMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, key string) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, key string, dest interface{}) error

	// GetPointerFunc mocks the GetPointer method.
	GetPointerFunc func(ctx context.Context, key string) (string, error)

	// SetFunc mocks the Set method.
	SetFunc func(ctx context.Context, key string, value interface{}, ttl time.Duration) error

	// SetPointerFunc mocks the SetPointer method.
	SetPointerFunc func(ctx context.Context, key string, targetKey string, ttl time.Duration) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Dest is the dest argument value.
			Dest interface{}
		}
		// GetPointer holds details about calls to the GetPointer method.
		GetPointer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Value is the value argument value.
			Value interface{}
			// TTL is the ttl argument value.
			TTL time.Duration
		}
		// SetPointer holds details about calls to the SetPointer method.
		SetPointer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// TargetKey is the targetKey argument value.
			TargetKey string
			// TTL is the ttl argument value.
			TTL time.Duration
		}
	}
	lockDelete     sync.RWMutex
	lockGet        sync.RWMutex
	lockGetPointer sync.RWMutex
	lockSet        sync.RWMutex
	lockSetPointer sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *CacheMock) Delete(ctx context.Context, key string) error {
	if mock.DeleteFunc == nil {
		panic("CacheMock.DeleteFunc: method is nil but Cache.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, key)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedCache.DeleteCalls())
func (mock *CacheMock) DeleteCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *CacheMock) Get(ctx context.Context, key string, dest interface{}) error {
	if mock.GetFunc == nil {
		panic("CacheMock.GetFunc: method is nil but Cache.Get was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Key  string
		Dest interface{}
	}{
		Ctx:  ctx,
		Key:  key,
		Dest: dest,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, key, dest)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedCache.GetCalls())
func (mock *CacheMock) GetCalls() []struct {
	Ctx  context.Context
	Key  string
	Dest interface{}
} {
	var calls []struct {
		Ctx  context.Context
		Key  string
		Dest interface{}
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetPointer calls GetPointerFunc.
func (mock *CacheMock) GetPointer(ctx context.Context, key string) (string, error) {
	if mock.GetPointerFunc == nil {
		panic("CacheMock.GetPointerFunc: method is nil but Cache.GetPointer was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetPointer.Lock()
	mock.calls.GetPointer = append(mock.calls.GetPointer, callInfo)
	mock.lockGetPointer.Unlock()
	return mock.GetPointerFunc(ctx, key)
}

// GetPointerCalls gets all the calls that were made to GetPointer.
// Check the length with:
//
//	len(mockedCache.GetPointerCalls())
func (mock *CacheMock) GetPointerCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockGetPointer.RLock()
	calls = mock.calls.GetPointer
	mock.lockGetPointer.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *CacheMock) Set(ctx context.Context, key string, value interface{}, ttl time.Duration) error {
	if mock.SetFunc == nil {
		panic("CacheMock.SetFunc: method is nil but Cache.Set was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Value interface{}
		TTL   time.Duration
	}{
		Ctx:   ctx,
		Key:   key,
		Value: value,
		TTL:   ttl,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	return mock.SetFunc(ctx, key, value, ttl)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//
//	len(mockedCache.SetCalls())
func (mock *CacheMock) SetCalls() []struct {
	Ctx   context.Context
	Key   string
	Value interface{}
	TTL   time.Duration
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Value interface{}
		TTL   time.Duration
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}

// SetPointer calls SetPointerFunc.
func (mock *CacheMock) SetPointer(ctx context.Context, key string, targetKey string, ttl time.Duration) error {
	if mock.SetPointerFunc == nil {
		panic("CacheMock.SetPointerFunc: method is nil but Cache.SetPointer was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Key       string
		TargetKey string
		TTL       time.Duration
	}{
		Ctx:       ctx,
		Key:       key,
		TargetKey: targetKey,
		TTL:       ttl,
	}
	mock.lockSetPointer.Lock()
	mock.calls.SetPointer = append(mock.calls.SetPointer, callInfo)
	mock.lockSetPointer.Unlock()
	return mock.SetPointerFunc(ctx, key, targetKey, ttl)
}

// SetPointerCalls gets all the calls that were made to SetPointer.
// Check the length with:
//
//	len(mockedCache.SetPointerCalls())
func (mock *CacheMock) SetPointerCalls() []struct {
	Ctx       context.Context
	Key       string
	TargetKey string
	TTL       time.Duration
} {
	var calls []struct {
		Ctx       context.Context
		Key       string
		TargetKey string
		TTL       time.Duration
	}
	mock.lockSetPointer.RLock()
	calls = mock.calls.SetPointer
	mock.lockSetPointer.RUnlock()
	return calls
}
