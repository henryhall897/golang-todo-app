// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package authstore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuthIdentity = `-- name: CreateAuthIdentity :one
INSERT INTO auth_identities (auth_id, provider, user_id, role)
VALUES ($1, $2, $3, $4)
RETURNING auth_id, provider, user_id, role, created_at, updated_at
`

type CreateAuthIdentityParams struct {
	AuthID   string      `json:"auth_id"`
	Provider string      `json:"provider"`
	UserID   pgtype.UUID `json:"user_id"`
	Role     string      `json:"role"`
}

func (q *Queries) CreateAuthIdentity(ctx context.Context, arg CreateAuthIdentityParams) (AuthIdentity, error) {
	row := q.db.QueryRow(ctx, createAuthIdentity,
		arg.AuthID,
		arg.Provider,
		arg.UserID,
		arg.Role,
	)
	var i AuthIdentity
	err := row.Scan(
		&i.AuthID,
		&i.Provider,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAuthIdentityByAuthID = `-- name: DeleteAuthIdentityByAuthID :execrows
DELETE FROM auth_identities
WHERE auth_id = $1
`

func (q *Queries) DeleteAuthIdentityByAuthID(ctx context.Context, authID string) (int64, error) {
	result, err := q.db.Exec(ctx, deleteAuthIdentityByAuthID, authID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAuthIdentityByAuthID = `-- name: GetAuthIdentityByAuthID :one
SELECT auth_id, provider, user_id, role, created_at, updated_at FROM auth_identities
WHERE auth_id = $1
`

func (q *Queries) GetAuthIdentityByAuthID(ctx context.Context, authID string) (AuthIdentity, error) {
	row := q.db.QueryRow(ctx, getAuthIdentityByAuthID, authID)
	var i AuthIdentity
	err := row.Scan(
		&i.AuthID,
		&i.Provider,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuthIdentityByUserID = `-- name: GetAuthIdentityByUserID :one
SELECT auth_id, provider, user_id, role, created_at, updated_at FROM auth_identities
WHERE user_id = $1
`

func (q *Queries) GetAuthIdentityByUserID(ctx context.Context, userID pgtype.UUID) (AuthIdentity, error) {
	row := q.db.QueryRow(ctx, getAuthIdentityByUserID, userID)
	var i AuthIdentity
	err := row.Scan(
		&i.AuthID,
		&i.Provider,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAuthIdentityRole = `-- name: UpdateAuthIdentityRole :one
UPDATE auth_identities
SET role = $2, updated_at = NOW()
WHERE auth_id = $1
RETURNING auth_id, provider, user_id, role, created_at, updated_at
`

type UpdateAuthIdentityRoleParams struct {
	AuthID string `json:"auth_id"`
	Role   string `json:"role"`
}

func (q *Queries) UpdateAuthIdentityRole(ctx context.Context, arg UpdateAuthIdentityRoleParams) (AuthIdentity, error) {
	row := q.db.QueryRow(ctx, updateAuthIdentityRole, arg.AuthID, arg.Role)
	var i AuthIdentity
	err := row.Scan(
		&i.AuthID,
		&i.Provider,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
