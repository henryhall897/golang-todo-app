// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package authstore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuthIdentity = `-- name: CreateAuthIdentity :one
INSERT INTO auth_identities (auth_id, provider, user_id)
VALUES ($1, $2, $3)
RETURNING auth_id, provider, user_id, created_at
`

type CreateAuthIdentityParams struct {
	AuthID   string      `json:"auth_id"`
	Provider string      `json:"provider"`
	UserID   pgtype.UUID `json:"user_id"`
}

func (q *Queries) CreateAuthIdentity(ctx context.Context, arg CreateAuthIdentityParams) (AuthIdentity, error) {
	row := q.db.QueryRow(ctx, createAuthIdentity, arg.AuthID, arg.Provider, arg.UserID)
	var i AuthIdentity
	err := row.Scan(
		&i.AuthID,
		&i.Provider,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAuthIdentityByAuthID = `-- name: DeleteAuthIdentityByAuthID :execrows
DELETE FROM auth_identities
WHERE auth_id = $1
`

func (q *Queries) DeleteAuthIdentityByAuthID(ctx context.Context, authID string) (int64, error) {
	result, err := q.db.Exec(ctx, deleteAuthIdentityByAuthID, authID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAuthIdentitiesByUserID = `-- name: GetAuthIdentitiesByUserID :many
SELECT auth_id, provider, user_id, created_at FROM auth_identities
WHERE user_id = $1
`

func (q *Queries) GetAuthIdentitiesByUserID(ctx context.Context, userID pgtype.UUID) ([]AuthIdentity, error) {
	rows, err := q.db.Query(ctx, getAuthIdentitiesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuthIdentity
	for rows.Next() {
		var i AuthIdentity
		if err := rows.Scan(
			&i.AuthID,
			&i.Provider,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuthIdentityByAuthID = `-- name: GetAuthIdentityByAuthID :one
SELECT auth_id, provider, user_id, created_at FROM auth_identities
WHERE auth_id = $1
`

func (q *Queries) GetAuthIdentityByAuthID(ctx context.Context, authID string) (AuthIdentity, error) {
	row := q.db.QueryRow(ctx, getAuthIdentityByAuthID, authID)
	var i AuthIdentity
	err := row.Scan(
		&i.AuthID,
		&i.Provider,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
