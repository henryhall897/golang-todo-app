package todolist

import (
	"fmt"
	"golang-todo-app/internal/todolist/gen"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// toAppTodoList transforms a database (SQLC-generated) gen.TodoList to an application-level TodoList.
func toAppTodoList(todo gen.TodoList) TodoList {

	// Transform the TodoList structure
	return TodoList{
		ID:          todo.ID,
		UserID:      todo.UserID,
		Name:        todo.Name,
		Description: todo.Description.String,
		CreatedAt:   todo.CreatedAt.Time,
		UpdatedAt:   todo.UpdatedAt.Time,
	}
}

// toDBTodoList converts Go standard types into a database-compatible TodoList with pgtype fields.
func toDBTodoList(id uuid.UUID, userID uuid.UUID, name string, description *string) gen.TodoList {
	// Convert description to pgtype.Text
	var dbDescription pgtype.Text
	if description != nil {
		dbDescription = pgtype.Text{
			String: *description,
			Valid:  true,
		}
	} else {
		dbDescription = pgtype.Text{
			Valid: false,
		}
	}

	// Return the transformed TodoList
	return gen.TodoList{
		ID:          id, // May be Nil for new records
		UserID:      userID,
		Name:        name,
		Description: dbDescription,
	}
}

// toDBTodoListForCreate allows nil ID since it's generated by the database.
func toDBTodoListForCreate(userID uuid.UUID, name string, description *string) gen.TodoList {
	return toDBTodoList(uuid.Nil, userID, name, description)
}

// toDBTodoListForUpdate requires a valid ID.
func toDBTodoListForUpdate(id uuid.UUID, userID uuid.UUID, name string, description *string) (gen.TodoList, error) {
	if id == uuid.Nil {
		return gen.TodoList{}, fmt.Errorf("invalid UUID for id")
	}
	return toDBTodoList(id, userID, name, description), nil
}
