// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: todo_list.sql

package gen

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const bulkDeleteTodoLists = `-- name: BulkDeleteTodoLists :execrows
DELETE FROM todo_lists
WHERE id = ANY($1::uuid[]) AND user_id = $2
`

type BulkDeleteTodoListsParams struct {
	Column1 []uuid.UUID `json:"column_1"`
	UserID  uuid.UUID   `json:"user_id"`
}

// Bulk delete todo lists for a specific user
func (q *Queries) BulkDeleteTodoLists(ctx context.Context, arg BulkDeleteTodoListsParams) (int64, error) {
	result, err := q.db.Exec(ctx, bulkDeleteTodoLists, arg.Column1, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const createTodoList = `-- name: CreateTodoList :one
INSERT INTO todo_lists (user_id, name, description)
VALUES ($1, $2, $3)
RETURNING id, user_id, name, description, created_at, updated_at
`

type CreateTodoListParams struct {
	UserID      uuid.UUID   `json:"user_id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

// Create a new todo list
func (q *Queries) CreateTodoList(ctx context.Context, arg CreateTodoListParams) (TodoList, error) {
	row := q.db.QueryRow(ctx, createTodoList, arg.UserID, arg.Name, arg.Description)
	var i TodoList
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTodoList = `-- name: DeleteTodoList :execrows
DELETE FROM todo_lists
WHERE id = $1 AND user_id = $2
`

type DeleteTodoListParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

// Delete a single todo list by ID for a specific user
func (q *Queries) DeleteTodoList(ctx context.Context, arg DeleteTodoListParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteTodoList, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getTodoListByID = `-- name: GetTodoListByID :one
SELECT id, user_id, name, description, created_at, updated_at
FROM todo_lists
WHERE id = $1 AND user_id = $2
`

type GetTodoListByIDParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

// Retrieve a todo list by ID, ensuring it belongs to the user
func (q *Queries) GetTodoListByID(ctx context.Context, arg GetTodoListByIDParams) (TodoList, error) {
	row := q.db.QueryRow(ctx, getTodoListByID, arg.ID, arg.UserID)
	var i TodoList
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTodoListsWithPagination = `-- name: ListTodoListsWithPagination :many
SELECT id, user_id, name, description, created_at, updated_at
FROM todo_lists
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListTodoListsWithPaginationParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

// Retrieve todo lists with pagination
func (q *Queries) ListTodoListsWithPagination(ctx context.Context, arg ListTodoListsWithPaginationParams) ([]TodoList, error) {
	rows, err := q.db.Query(ctx, listTodoListsWithPagination, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TodoList
	for rows.Next() {
		var i TodoList
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodoList = `-- name: UpdateTodoList :one
UPDATE todo_lists
SET name = $3, description = $4, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, name, description, created_at, updated_at
`

type UpdateTodoListParams struct {
	ID          uuid.UUID   `json:"id"`
	UserID      uuid.UUID   `json:"user_id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

// Update an existing todo list for a specific user
func (q *Queries) UpdateTodoList(ctx context.Context, arg UpdateTodoListParams) (TodoList, error) {
	row := q.db.QueryRow(ctx, updateTodoList,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Description,
	)
	var i TodoList
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
