// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tasks.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (list_id, title, task_desc, status, due_date, priority)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, list_id, title, task_desc, status, due_date, created_at, updated_at, priority, completed_at
`

type CreateTaskParams struct {
	ListID   pgtype.UUID        `json:"list_id"`
	Title    pgtype.Text        `json:"title"`
	TaskDesc pgtype.Text        `json:"task_desc"`
	Status   pgtype.Text        `json:"status"`
	DueDate  pgtype.Timestamptz `json:"due_date"`
	Priority pgtype.Int4        `json:"priority"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.ListID,
		arg.Title,
		arg.TaskDesc,
		arg.Status,
		arg.DueDate,
		arg.Priority,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ListID,
		&i.Title,
		&i.TaskDesc,
		&i.Status,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Priority,
		&i.CompletedAt,
	)
	return i, err
}

const deleteTasks = `-- name: DeleteTasks :many
DELETE FROM tasks
USING todo_lists
WHERE tasks.id = ANY($1::uuid[])
  AND tasks.list_id = todo_lists.id
  AND todo_lists.user_id = $2
RETURNING tasks.id, tasks.list_id, tasks.title, tasks.task_desc, tasks.status, tasks.due_date, tasks.created_at, tasks.updated_at, tasks.priority, tasks.completed_at
`

type DeleteTasksParams struct {
	Column1 []pgtype.UUID `json:"column_1"`
	UserID  pgtype.UUID   `json:"user_id"`
}

func (q *Queries) DeleteTasks(ctx context.Context, arg DeleteTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, deleteTasks, arg.Column1, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ListID,
			&i.Title,
			&i.TaskDesc,
			&i.Status,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Priority,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOverdueTasks = `-- name: ListOverdueTasks :many

SELECT tasks.id, tasks.list_id, tasks.title, tasks.task_desc, tasks.status, tasks.due_date, tasks.created_at, tasks.updated_at, tasks.priority, tasks.completed_at
FROM tasks
JOIN todo_lists ON tasks.list_id = todo_lists.id
WHERE tasks.list_id = $1
  AND todo_lists.user_id = $2
  AND tasks.due_date < CURRENT_TIMESTAMP
  AND tasks.status != 'completed'
ORDER BY tasks.due_date ASC
`

type ListOverdueTasksParams struct {
	ListID pgtype.UUID `json:"list_id"`
	UserID pgtype.UUID `json:"user_id"`
}

// Reference user_id from todo_lists table
func (q *Queries) ListOverdueTasks(ctx context.Context, arg ListOverdueTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, listOverdueTasks, arg.ListID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ListID,
			&i.Title,
			&i.TaskDesc,
			&i.Status,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Priority,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
SELECT tasks.id, tasks.list_id, tasks.title, tasks.task_desc, tasks.status, tasks.due_date, tasks.created_at, tasks.updated_at, tasks.priority, tasks.completed_at
FROM tasks
JOIN todo_lists ON tasks.list_id = todo_lists.id
WHERE todo_lists.id = $1
  AND todo_lists.user_id = $2
ORDER BY tasks.priority ASC, tasks.due_date ASC
`

type ListTasksParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasks, arg.ID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ListID,
			&i.Title,
			&i.TaskDesc,
			&i.Status,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Priority,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasksByStatus = `-- name: ListTasksByStatus :many
SELECT tasks.id, tasks.list_id, tasks.title, tasks.task_desc, tasks.status, tasks.due_date, tasks.created_at, tasks.updated_at, tasks.priority, tasks.completed_at
FROM tasks
JOIN todo_lists ON tasks.list_id = todo_lists.id
WHERE tasks.list_id = $1
  AND todo_lists.user_id = $2
  AND tasks.status = $3
`

type ListTasksByStatusParams struct {
	ListID pgtype.UUID `json:"list_id"`
	UserID pgtype.UUID `json:"user_id"`
	Status pgtype.Text `json:"status"`
}

func (q *Queries) ListTasksByStatus(ctx context.Context, arg ListTasksByStatusParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasksByStatus, arg.ListID, arg.UserID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ListID,
			&i.Title,
			&i.TaskDesc,
			&i.Status,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Priority,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markTaskCompleted = `-- name: MarkTaskCompleted :exec
UPDATE tasks
SET 
    status = 'completed',                -- Set status to 'completed'
    priority = NULL,                      -- Set priority to NULL when task is completed
    completed_at = CURRENT_TIMESTAMP,    -- Set completed_at to current timestamp
    updated_at = CURRENT_TIMESTAMP       -- Update the timestamp for the task
FROM todo_lists
WHERE 
    tasks.id = $1
    AND tasks.list_id = todo_lists.id
    AND todo_lists.user_id = $2
`

type MarkTaskCompletedParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) MarkTaskCompleted(ctx context.Context, arg MarkTaskCompletedParams) error {
	_, err := q.db.Exec(ctx, markTaskCompleted, arg.ID, arg.UserID)
	return err
}

const searchTasks = `-- name: SearchTasks :many
SELECT tasks.id, tasks.list_id, tasks.title, tasks.task_desc, tasks.status, tasks.due_date, tasks.created_at, tasks.updated_at, tasks.priority, tasks.completed_at
FROM tasks
JOIN todo_lists ON tasks.list_id = todo_lists.id
WHERE tasks.list_id = $1
  AND todo_lists.user_id = $2
  AND (tasks.title ILIKE '%' || $3 || '%' OR tasks.task_desc ILIKE '%' || $3 || '%')
ORDER BY tasks.priority ASC NULLS LAST, tasks.due_date ASC
`

type SearchTasksParams struct {
	ListID  pgtype.UUID `json:"list_id"`
	UserID  pgtype.UUID `json:"user_id"`
	Column3 pgtype.Text `json:"column_3"`
}

func (q *Queries) SearchTasks(ctx context.Context, arg SearchTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, searchTasks, arg.ListID, arg.UserID, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ListID,
			&i.Title,
			&i.TaskDesc,
			&i.Status,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Priority,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET title = COALESCE($3, title),
    task_desc = COALESCE($4, task_desc),
    status = COALESCE($5, status),
    due_date = COALESCE($6, due_date),
    priority = COALESCE($7, priority),
    updated_at = CURRENT_TIMESTAMP,
    completed_at = COALESCE($8, completed_at)
FROM todo_lists
WHERE tasks.id = $1
  AND tasks.list_id = todo_lists.id
  AND todo_lists.user_id = $2
RETURNING tasks.id, tasks.list_id, tasks.title, tasks.task_desc, tasks.status, tasks.due_date, tasks.created_at, tasks.updated_at, tasks.priority, tasks.completed_at
`

type UpdateTaskParams struct {
	ID          pgtype.UUID        `json:"id"`
	UserID      pgtype.UUID        `json:"user_id"`
	Title       pgtype.Text        `json:"title"`
	TaskDesc    pgtype.Text        `json:"task_desc"`
	Status      pgtype.Text        `json:"status"`
	DueDate     pgtype.Timestamptz `json:"due_date"`
	Priority    pgtype.Int4        `json:"priority"`
	CompletedAt pgtype.Timestamptz `json:"completed_at"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.TaskDesc,
		arg.Status,
		arg.DueDate,
		arg.Priority,
		arg.CompletedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ListID,
		&i.Title,
		&i.TaskDesc,
		&i.Status,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Priority,
		&i.CompletedAt,
	)
	return i, err
}

const updateTaskPriority = `-- name: UpdateTaskPriority :exec
WITH RankedTasks AS (
    SELECT 
        tasks.id,
        ROW_NUMBER() OVER (ORDER BY tasks.priority DESC, tasks.due_date ASC) AS new_priority
    FROM tasks
    WHERE tasks.list_id = $1
)
UPDATE tasks
SET 
    priority = CASE 
        WHEN tasks.id = $2 THEN $3  -- Set the new priority for the specific task
        ELSE RankedTasks.new_priority -- Reorder the other tasks
    END,
    updated_at = CURRENT_TIMESTAMP
FROM RankedTasks
WHERE tasks.id = RankedTasks.id
`

type UpdateTaskPriorityParams struct {
	ListID   pgtype.UUID `json:"list_id"`
	ID       pgtype.UUID `json:"id"`
	Priority pgtype.Int4 `json:"priority"`
}

func (q *Queries) UpdateTaskPriority(ctx context.Context, arg UpdateTaskPriorityParams) error {
	_, err := q.db.Exec(ctx, updateTaskPriority, arg.ListID, arg.ID, arg.Priority)
	return err
}
