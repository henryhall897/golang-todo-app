// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/google/uuid"
	"github.com/henryhall897/golang-todo-app/internal/users"
	"sync"
)

// Ensure, that UserServiceMock does implement users.UserService.
// If this is not the case, regenerate this file with moq.
var _ users.UserService = &UserServiceMock{}

// UserServiceMock is a mock implementation of users.UserService.
//
//	func TestSomethingThatUsesUserService(t *testing.T) {
//
//		// make and configure a mocked users.UserService
//		mockedUserService := &UserServiceMock{
//			CreateUserFunc: func(ctx context.Context, params users.CreateUserParams) (users.User, error) {
//				panic("mock out the CreateUser method")
//			},
//			DeleteUserFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the DeleteUser method")
//			},
//			GetUserByEmailFunc: func(ctx context.Context, email string) (users.User, error) {
//				panic("mock out the GetUserByEmail method")
//			},
//			GetUserByIDFunc: func(ctx context.Context, id uuid.UUID) (users.User, error) {
//				panic("mock out the GetUserByID method")
//			},
//			ListUsersFunc: func(ctx context.Context, params users.ListUsersParams) ([]users.User, error) {
//				panic("mock out the ListUsers method")
//			},
//			UpdateUserFunc: func(ctx context.Context, params users.UpdateUserParams) (users.User, error) {
//				panic("mock out the UpdateUser method")
//			},
//		}
//
//		// use mockedUserService in code that requires users.UserService
//		// and then make assertions.
//
//	}
type UserServiceMock struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(ctx context.Context, params users.CreateUserParams) (users.User, error)

	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(ctx context.Context, id uuid.UUID) error

	// GetUserByEmailFunc mocks the GetUserByEmail method.
	GetUserByEmailFunc func(ctx context.Context, email string) (users.User, error)

	// GetUserByIDFunc mocks the GetUserByID method.
	GetUserByIDFunc func(ctx context.Context, id uuid.UUID) (users.User, error)

	// ListUsersFunc mocks the ListUsers method.
	ListUsersFunc func(ctx context.Context, params users.ListUsersParams) ([]users.User, error)

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(ctx context.Context, params users.UpdateUserParams) (users.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params users.CreateUserParams
		}
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetUserByEmail holds details about calls to the GetUserByEmail method.
		GetUserByEmail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
		}
		// GetUserByID holds details about calls to the GetUserByID method.
		GetUserByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// ListUsers holds details about calls to the ListUsers method.
		ListUsers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params users.ListUsersParams
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params users.UpdateUserParams
		}
	}
	lockCreateUser     sync.RWMutex
	lockDeleteUser     sync.RWMutex
	lockGetUserByEmail sync.RWMutex
	lockGetUserByID    sync.RWMutex
	lockListUsers      sync.RWMutex
	lockUpdateUser     sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *UserServiceMock) CreateUser(ctx context.Context, params users.CreateUserParams) (users.User, error) {
	if mock.CreateUserFunc == nil {
		panic("UserServiceMock.CreateUserFunc: method is nil but UserService.CreateUser was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params users.CreateUserParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(ctx, params)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedUserService.CreateUserCalls())
func (mock *UserServiceMock) CreateUserCalls() []struct {
	Ctx    context.Context
	Params users.CreateUserParams
} {
	var calls []struct {
		Ctx    context.Context
		Params users.CreateUserParams
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// DeleteUser calls DeleteUserFunc.
func (mock *UserServiceMock) DeleteUser(ctx context.Context, id uuid.UUID) error {
	if mock.DeleteUserFunc == nil {
		panic("UserServiceMock.DeleteUserFunc: method is nil but UserService.DeleteUser was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	mock.lockDeleteUser.Unlock()
	return mock.DeleteUserFunc(ctx, id)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//
//	len(mockedUserService.DeleteUserCalls())
func (mock *UserServiceMock) DeleteUserCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	mock.lockDeleteUser.RUnlock()
	return calls
}

// GetUserByEmail calls GetUserByEmailFunc.
func (mock *UserServiceMock) GetUserByEmail(ctx context.Context, email string) (users.User, error) {
	if mock.GetUserByEmailFunc == nil {
		panic("UserServiceMock.GetUserByEmailFunc: method is nil but UserService.GetUserByEmail was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Email string
	}{
		Ctx:   ctx,
		Email: email,
	}
	mock.lockGetUserByEmail.Lock()
	mock.calls.GetUserByEmail = append(mock.calls.GetUserByEmail, callInfo)
	mock.lockGetUserByEmail.Unlock()
	return mock.GetUserByEmailFunc(ctx, email)
}

// GetUserByEmailCalls gets all the calls that were made to GetUserByEmail.
// Check the length with:
//
//	len(mockedUserService.GetUserByEmailCalls())
func (mock *UserServiceMock) GetUserByEmailCalls() []struct {
	Ctx   context.Context
	Email string
} {
	var calls []struct {
		Ctx   context.Context
		Email string
	}
	mock.lockGetUserByEmail.RLock()
	calls = mock.calls.GetUserByEmail
	mock.lockGetUserByEmail.RUnlock()
	return calls
}

// GetUserByID calls GetUserByIDFunc.
func (mock *UserServiceMock) GetUserByID(ctx context.Context, id uuid.UUID) (users.User, error) {
	if mock.GetUserByIDFunc == nil {
		panic("UserServiceMock.GetUserByIDFunc: method is nil but UserService.GetUserByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetUserByID.Lock()
	mock.calls.GetUserByID = append(mock.calls.GetUserByID, callInfo)
	mock.lockGetUserByID.Unlock()
	return mock.GetUserByIDFunc(ctx, id)
}

// GetUserByIDCalls gets all the calls that were made to GetUserByID.
// Check the length with:
//
//	len(mockedUserService.GetUserByIDCalls())
func (mock *UserServiceMock) GetUserByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetUserByID.RLock()
	calls = mock.calls.GetUserByID
	mock.lockGetUserByID.RUnlock()
	return calls
}

// ListUsers calls ListUsersFunc.
func (mock *UserServiceMock) ListUsers(ctx context.Context, params users.ListUsersParams) ([]users.User, error) {
	if mock.ListUsersFunc == nil {
		panic("UserServiceMock.ListUsersFunc: method is nil but UserService.ListUsers was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params users.ListUsersParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockListUsers.Lock()
	mock.calls.ListUsers = append(mock.calls.ListUsers, callInfo)
	mock.lockListUsers.Unlock()
	return mock.ListUsersFunc(ctx, params)
}

// ListUsersCalls gets all the calls that were made to ListUsers.
// Check the length with:
//
//	len(mockedUserService.ListUsersCalls())
func (mock *UserServiceMock) ListUsersCalls() []struct {
	Ctx    context.Context
	Params users.ListUsersParams
} {
	var calls []struct {
		Ctx    context.Context
		Params users.ListUsersParams
	}
	mock.lockListUsers.RLock()
	calls = mock.calls.ListUsers
	mock.lockListUsers.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *UserServiceMock) UpdateUser(ctx context.Context, params users.UpdateUserParams) (users.User, error) {
	if mock.UpdateUserFunc == nil {
		panic("UserServiceMock.UpdateUserFunc: method is nil but UserService.UpdateUser was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params users.UpdateUserParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	mock.lockUpdateUser.Unlock()
	return mock.UpdateUserFunc(ctx, params)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//
//	len(mockedUserService.UpdateUserCalls())
func (mock *UserServiceMock) UpdateUserCalls() []struct {
	Ctx    context.Context
	Params users.UpdateUserParams
} {
	var calls []struct {
		Ctx    context.Context
		Params users.UpdateUserParams
	}
	mock.lockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	mock.lockUpdateUser.RUnlock()
	return calls
}
