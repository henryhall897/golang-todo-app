services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_VERSION: ${APP_VERSION:-latest}
        GOOS: ${GOOS:-linux}
        GOARCH: ${GOARCH:-amd64}
    image: golang-todo-app:${APP_VERSION:-latest}
    container_name: golang-todo-app
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    environment:
      DATABASE_URL: "${DATABASE_URL}"
      SERVER_BIND_ADDRESS: "${SERVER_BIND_ADDRESS}"
      SERVER_PORT: "${SERVER_PORT}"
      LOG_LEVEL: "${LOG_LEVEL}"
      CORS_ORIGIN: "${CORS_ORIGIN}"
      POSTGRES_POOL_MAX_CONN: "${POSTGRES_POOL_MAX_CONN}"
      POSTGRES_POOL_MIN_CONN: "${POSTGRES_POOL_MIN_CONN}"
      REDIS_ADDRESS: "${REDIS_ADDRESS}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - todo-network

  postgres:
    image: postgres:${POSTGRES_VERSION:-latest}
    container_name: postgres-db
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - todo-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5
      timeout: 3s

  redis:
    image: redis:7.2.0
    container_name: redis-cache
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: 6379
    networks:
      - todo-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5
      timeout: 3s

volumes:
  postgres_data:
  redis_data:

networks:
  todo-network:
    driver: bridge
